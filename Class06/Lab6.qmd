---
title: "Lab6"
author: "Ashlyn Murphy"
format: pdf
---
## Lab 6

```{r}
# example input vectors

student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)

student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)

student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

# Questions

> Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput”

```{r}
student1
```

The regular avg will be returned by the `mean()` function
```{r}
# calculates the average aka the overall grade
mean(student1)
```

find the minimum value to find the dropped score
```{r}
min(student1)
```

to find the position of the minimum value in the vector, use `which.min()`
```{r}
which.min(student1)
```

```{r}
student1[8]
```

```{r}
student1[which.min(student1)]
```
returns the min value for student 1

to get everything but the min value...
```{r}
student1[-which.min(student1)]
# the minus sign in front of the which.min() function returns everything but the result of that function

```

the take the mean of this function to get the grade
```{r}
#first solution to drop the lowest value from a student score list
mean(student1[-which.min(student1)])
```

```{r}
#student2

student2
```

cant just use na.rm = True to deal with this NA value because it would just remove it and not count it as the lowest score -- need to find a way to map the NA values to zero.

To identify NA values use the `is.na()` function

```{r}
student2

is.na(student2)
```

```{r}
student2[is.na(student2)]
```
set x = student to for easier code writing!

to map NA to zero, set instances when student2 (or x) is NA as equal to zero
```{r}
x <- student2
x

x[is.na(x)] <-  0
x
```
then take the mean to get the true average of student2 scores
```{r}
mean(x)
```
student3
```{r}
x <- student3
x[is.na(x)] <-  0
mean(x[-which.min(x)])
```


## function

use the working snippet to make a function

```{r}
#' Calculate average scores for a vector of homework scores
#' dropping the lowest single score. Missing values will be treated
#' as zero score
#'
#' @param x Numeric vector of homework scores
#'
#' @return Average score
#' @export
#'
#' @examples
#'    student <- c(100, NA, 90, 80)
#'    grade(student)
#' 
grade <- function(x) {
  # missing homework scores zero
  x[is.na(x)] <-  0
  # exclude lowest score homework
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

now use the gradebook to grade the whole class of multiple students

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
```

```{r}
#second argument is the margin which is 1 = rows 2 = columns
results <- apply(gradebook, 1, grade)
results
```


> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook?

```{r}
#find max score in gradebook
max(apply(gradebook, 1, grade))

#find where the max score occurs in the gradebook
which.max(apply(gradebook, 1, grade))

```


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? 

```{r}
apply(gradebook, 2, grade)

min(apply(gradebook, 2, grade))

which.min(apply(gradebook, 2, grade))
```


> Q4. From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)

```{r}
gradebook[is.na(gradebook)] <- 0
cor(results, gradebook$hw5)
```

```{r}
apply(gradebook, 2, cor, x = results)
```

the most predictive homework is homework 5.

> Q5. Make sure you save your Quarto document and can click the “Render” button to generate a PDF foramt report without errors. Finally, submit your PDF
to gradescope.

Finally, make a pdf report.
