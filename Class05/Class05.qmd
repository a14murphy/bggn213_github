---
title: "Class 5: Data Visualization"
author: "Ashlyn"
format: gfm
---

# Plotting in R

R has many plotting and visualization systems, including "base" R.

```{r}
head(cars, n = 10)
```

```{r}
plot(cars)
```

ggplot is great for more complex plots.

```{r}
#ggplot(cars)
```

To use an add-on, it must first be installed using the function `install.packages()` with the name of the desired package in parenthesis. After downloading the package, it needs to be loaded using the `library` function

```{r}
library(ggplot2)
ggplot(cars)
```

ggplot is highly verbose and each ggplot needs at least three things: 

-   Data: the dataframe of interest

-   aesthetics (aes): how the data is mapped to the plot (x axis, y axis, etc)

-   geometries (geom\_*type*): plot type (ex: geom_point, geom_line, etc)

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth(se=FALSE, method="lm") +
  theme_bw() 
```
## A plot of some genes

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> How many genes are in this dataset?

```{r}
nrow(genes)
```

There are `r nrow(genes)` genes in this dataset.

> How many genes are upregulated?

```{r}
table(genes$State)
```
 or
 
```{r}
sum(genes$State == "up")
```

```{r}
ggplot(genes) +
  aes(x = Condition1, y = Condition2, color = State) +
  geom_point()
```

assign plot to a value so it can easily be edited or layered on later and then call the value

```{r}
p <- ggplot(genes) +
  aes(x = Condition1, y = Condition2, color = State) +
  geom_point()

p
```

change the legend values of p

```{r}
p + scale_colour_manual( values=c("blue","gray","red") )
```

give labels using `labs()`  (x and y labels, title, etc)

```{r}
p + labs(title = "regulation of genes based on condition1 vs condition2", subtitle = "some subtitle")
```
## Gapminder

```{r}
library(gapminder)
library(dplyr)
gapminder_2007 <- gapminder %>% filter(year==2007)
```

```{r}
q <- ggplot(gapminder_2007) +
  aes(x = gdpPercap, y = lifeExp) +
  geom_point(alpha= 0.3)

q
```
> Q. How many countries are in this dataset?

```{r}
length( unique(gapminder$country))
```

> Q. How many years does this dataset span?

```{r}
length( unique(gapminder$year))
```
or

```{r}
range(gapminder$year)
```

> Q. Which country has the smallest population?

first, where is this min value located in the pop vector?

```{r}
ind <- which.min(gapminder$pop)

ind
```
which.min (which.max) for the arg min, i.e., the location where an extreme value occurs.

now use this to access the $country value for this position

```{r}
gapminder$country[ind]
```


```{r}
gapminder[ind,]
```
```{r}
a <- ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.3)

a
```

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, color = continent, size = pop) +
  geom_point(alpha=0.3)


```

facet by continent

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, color = continent, size = pop) +
  geom_point(alpha=0.3) +
  facet_wrap(~continent)
```

